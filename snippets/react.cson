'.source.python':
  'wdb':
    prefix: 'wdb'
    body: 'import wdb;wdb.set_trace()'

'.source.js, .source.jsx, .source.ts, .source.js-semantic':
  'Bemboo root block':
    prefix: 'cn'
    body: 'className={b}'
  'Bemboo element':
    prefix: 'cne'
    body: 'className={b.e(\'$1\')}'
  'Bemboo modifier':
    prefix: 'cnm'
    body: 'className={b.m({ ${1:active} })}'
  'Bemboo element modifier':
    prefix: 'cnem'
    body: 'className={b.e(\'$1\').m({ ${2:active} })}'
  'Connected react component':
    prefix: 'rcrc'
    body: '''
    import block from 'bemboo'
    import React from 'react'
    import { connect } from 'react-redux'

    @connect(
      state => ({
        ${2:endpoint}Api: state.api.${2:endpoint}
      }),
      dispatch => ({
        sync: () => dispatch(api.actions.${2:endpoint}.get())
      })
    )
    @block
    export default class ${1:Name} extends React.Component {
      constructor(props) {
        super(props)
        this.state = {
          ${3:value}: ''
        }
        this.handleChange = this.handleChange.bind(this)
      }

      componentDidMount() {
        const { sync } = this.props
        sync()
      }

      handleChange({ target: { value } }) {
      }

      render(b) {
        const { ${2:endpoint}Api: { objects: ${2:endpoint}, loading } } = this.props
        const { ${3:value} } = this.state
        return (
          <${4:section} className={b}>
            <${5:article}>
              <h1>${6:Titre}</h1>
            </${5:article}>
          </${4:section}>
        )
      }
    }
'''
  'Functional react component':
    prefix: 'rfrc'
    body: '''
    import block from 'bemboo'
    import React from 'react'

    export default block('${1:Name}', (b, { ${2:prop} }) => (
      <article className={b}>
        $3
      </article>
    ))
'''
  'React constructor':
    prefix: 'rcst'
    body: '''
    constructor(props) {
      super(props)
      this.state = {
        ${1:value}: ''
      }
      this.handle${2:Change} = this.handle${2:Change}.bind(this)
    }
'''
  'React props':
    prefix: 'rprops'
    body: 'const { ${1:value} } = this.props$2'

  'React state':
    prefix: 'rstate'
    body: 'const { ${1:value} } = this.state$2'

  'React onSomething':
    prefix: 'ron'
    body: 'on${1:Click}={this.handle${1:Click}}$2'
